# A URL agora aponta para 'db', que será o nome do nosso container de banco de dados.
# O Spring irá esperar o banco estar pronto por causa do `spring.jpa.hibernate.ddl-auto=update`.
spring.datasource.url=jdbc:postgresql://db:5432/${POSTGRES_DB}

# As credenciais agora são lidas de variáveis de ambiente, que serão injetadas pelo Docker Compose.
# Isso é uma excelente prática de segurança!
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

# Configuração do Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true

# ===============================================
# CONFIGURAÇÃO DO SERVIÇO DE E-MAIL (Spring Mail)
# ===============================================
spring.mail.host=smtp.gmail.com
spring.mail.port=587
spring.mail.username=arthur.araujo48@gmail.com
spring.mail.password=fdiwxtrhwajlcgji

# Propriedades adicionais para conexão com Gmail
spring.mail.properties.mail.smtp.auth=true
spring.mail.properties.mail.smtp.starttls.enable=true